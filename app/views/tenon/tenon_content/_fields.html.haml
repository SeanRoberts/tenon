.tn-tc{ class: field }
  %label
    - if defined?(lang)
      = field.gsub("_#{lang}", '').to_s.titleize
      (#{lang_title})
    - else
      = field.to_s.titleize

  .explanation
    = t('tenon.tenon_content.select_rows_from_the_library')
    = t('tenon.tenon_content.you_can_format_your_text')

  .tn-tc-main-actions
    = link_to '#', class: 'tn-tc-pop-out btn btn-primary' do
      = fa_icon('eye')
      %span= t('tenon.tenon_content.edit_in_preview_mode')

    = link_to '#', class: 'tn-tc-add-content btn btn-primary initial-row', data: { modal_target: ".tenon-library", modal_closest: '.tn-tc', modal_clone: 'true', modal_title: t('tenon.tenon_content.add_content'), modal_handler: 'Tenon.features.tenonContent.Library' } do
      = fa_icon('plus-circle')
      %span= t('tenon.tenon_content.add_content')

  .tn-tc-wrap
    .tn-tc-sizes
      %h2= t('tenon.tenon_content.preview_mode')
      %p= t('tenon.tenon_content.use_preview_mode_to_see')
      = tenon_content_sizes
      = link_to t('tenon.tenon_content.done'), '#', class: 'tn-tc-pop-out-close btn btn-comp'
    .tenon-content
      = f.fields_for "#{field}_tenon_content_rows" do |row|
        - if row.object
          = render "tenon/tenon_content/row", f: row, row_partial: row.object.decorate.form_partial, field: field, title: row.object.row_type.titleize

    .tenon-library-holder
      .tenon-library
        %ul
          - Tenon::TenonContent::RowTypes::LIBRARY_ROW_TYPES.each do |title, row_type|
            %li= row_link(title, row_type, field, f)
        .spacer

